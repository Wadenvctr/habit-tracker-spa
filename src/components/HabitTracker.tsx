import React, { useEffect, useState } from "react";
import { Button, Input, List, Modal, message, Select, Space, Tag, InputNumber, Flex, Typography, Divider } from "antd";
import { useDispatch, useSelector } from "react-redux";
import type { RootState } from "../store";
import { addHabit, removeHabit, setHabits, updateHabitCompletions } from "../store/habitsSlice";
import { api } from "../api/mockApi";
import dayjs from "dayjs";

const emojiOptions = [
  { label: "üî•", value: "üî•" },
  { label: "üåü", value: "üåü" },
  { label: "üí™", value: "üí™" },
  { label: "üìö", value: "üìö" },
  { label: "‚òïÔ∏è", value: "‚òïÔ∏è" },
  { label: "üëåüèº", value: "üëåüèº" },
  { label: "‚úçüèº", value: "‚úçüèº" },
];

function HabitTracker() {
  const dispatch = useDispatch();
  const habits = useSelector((state: RootState) => state.habits.list);
  const completions = useSelector((state: RootState) => state.habits.completions);
  const userId = useSelector((state: RootState) => state.auth.user?.id);

  const [name, setName] = useState("");
  const [icon, setIcon] = useState<string | undefined>(undefined);
  const [goalDays, setGoalDays] = useState<number>(21);
  const [isDeleting, setIsDeleting] = useState<string | null>(null);
  const [loadingCompletions, setLoadingCompletions] = useState(false);

  useEffect(() => {
    if (!userId) return;
    api.getHabits(userId)
      .then((data) => {
        dispatch(setHabits(data));
        loadCompletionsForHabits(data);
      })
      .catch(() => message.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≤—ã—á–µ–∫"));
  }, [userId, dispatch]);
  
// TODO: —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –µ–Ω–¥–ø–æ–∏–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º —Å—Ä–∞–∑—É –ø–∞—Ä—Å–∏–ª –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ idUser, –Ω–∞–¥–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ —á—Ç–æ–±—ã –Ω–µ —Å—Ç–æ—è–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã.
  const loadCompletionsForHabits = async (habitsData: typeof habits) => {
    setLoadingCompletions(true);
    try {
      const allCompletions: Record<string, string[]> = {};
      for (const habit of habitsData) {
        const dates = await api.getCompletionsForHabit(habit.id);
        allCompletions[habit.id] = dates;
      }
      dispatch(updateHabitCompletions(allCompletions));
    } catch {
      message.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–º–µ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è");
    } finally {
      setLoadingCompletions(false);
    }
  };

  const handleAdd = async () => {
    if (!name.trim()) {
      message.warning("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏");
      return;
    }
    if (goalDays < 1) {
      message.warning("–¶–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 1 –¥–µ–Ω—å");
      return;
    }
    if (!userId) {
      message.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
      return;
    }
    try {
      const newHabit = await api.createHabit(userId, {
        name: name.trim(),
        goalDays,
        icon,
      });
      dispatch(addHabit(newHabit));
      setName("");
      setIcon(undefined);
      setGoalDays(21);
      message.success("–ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞");
    } catch {
      message.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏");
    }
  };

  const confirmDelete = (id: string) => {
    setIsDeleting(id);
  };

  const handleDelete = async () => {
    if (!isDeleting) return;
    try {
      await api.deleteHabit(isDeleting);
      dispatch(removeHabit(isDeleting));
      message.success("–ü—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞");
    } catch {
      message.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è");
    } finally {
      setIsDeleting(null);
    }
  };

  const toggleCompletionToday = async (habitId: string) => {
    if (!userId) {
      message.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
      return;
    }
    const todayISO = dayjs().format("YYYY-MM-DD");
    try {
      await api.toggleCompletion(habitId, todayISO);
      await loadCompletionsForHabits(habits);
      message.success("–û—Ç–º–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
    } catch {
      message.error("–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è");
    }
  };

  const isDoneToday = (habitId: string) => {
    const todayISO = dayjs().format("YYYY-MM-DD");
    return completions[habitId]?.includes(todayISO);
  };

  const getCurrentStreak = (habitId: string): number => {
    const dates = completions[habitId];
    if (!dates || dates.length === 0) return 0;

    const sortedDates = dates
      .map((d) => dayjs(d))
      .sort((a, b) => a.diff(b));

    let streak = 0;
    let currentDate = dayjs().startOf('day');

    for (let i = sortedDates.length - 1; i >= 0; i--) {
      if (sortedDates[i].isSame(currentDate, 'day')) {
        streak++;
        currentDate = currentDate.subtract(1, 'day');
      } else if (sortedDates[i].isBefore(currentDate, 'day')) {
        break;
      }
    }
    return streak;
  };

  return (
    <div>
      <Space style={{ marginBottom: 20 }}>
        <Input
          placeholder="–ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞"
          value={name}
          onChange={(e) => setName(e.target.value)}
          style={{ width: 200 }}
        />
        <InputNumber
          min={1}
          value={goalDays}
          onChange={(value) => setGoalDays(value ?? 21)}
          style={{ width: 120 }}
          placeholder="–¶–µ–ª—å –¥–Ω–µ–π"
        />
        <Select
          placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∫–æ–Ω–∫—É"
          options={emojiOptions}
          value={icon}
          onChange={setIcon}
          style={{ width: 120 }}
          allowClear
        />
        <Button type="primary" onClick={handleAdd}>
          –î–æ–±–∞–≤–∏—Ç—å
        </Button>
      </Space>
           
      <Flex vertical gap="middle" className="w-full">
      {habits.map((habit) => {
        const streak = getCurrentStreak(habit.id);
        const doneToday = isDoneToday(habit.id);

        return (
          <Flex key={habit.id} vertical className="w-full">
            <Flex
              wrap="wrap"
              align="center"
              justify="space-between"
              gap="small"
              className="w-full"
            >
              <Flex wrap="wrap" align="center" gap="small">
                {habit.icon && <span>{habit.icon}</span>}
                <Typography.Text strong>{habit.name}</Typography.Text>
                <Tag color={streak >= habit.goalDays ? "green" : "blue"}>
                  –ü—Ä–æ–≥—Ä–µ—Å—Å: {streak} / {habit.goalDays} –¥–Ω–µ–π
                </Tag>
                {doneToday && <Tag color="success">–°–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞–Ω–æ</Tag>}
              </Flex>

              <Flex wrap="wrap" gap="small" style={{ flex: "1 1 auto", justifyContent: "flex-end" }}>
                <Button
                  danger
                  block
                  onClick={() => confirmDelete(habit.id)}
                  style={{ maxWidth: 200 }}
                >
                  –£–¥–∞–ª–∏—Ç—å
                </Button>
                <Button
                  block
                  type={doneToday ? "default" : "primary"}
                  onClick={() => toggleCompletionToday(habit.id)}
                  style={{ maxWidth: 200 }}
                >
                  {doneToday ? "–°–Ω—è—Ç—å –æ—Ç–º–µ—Ç–∫—É" : "–°–¥–µ–ª–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è"}
                </Button>
              </Flex>
            </Flex>

            <Divider style={{ margin: "8px 0" }} />
          </Flex>
        );
      })}
    </Flex>
    
      <Modal
        title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"
        open={Boolean(isDeleting)}
        onOk={handleDelete}
        onCancel={() => setIsDeleting(null)}
        okText="–£–¥–∞–ª–∏—Ç—å"
        cancelText="–û—Ç–º–µ–Ω–∞"
      >
        <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –ø—Ä–∏–≤–∏–≤–∞—Ç—å —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É?</p>
      </Modal>
    </div>
  );
}

export default HabitTracker;
